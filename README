Strokelitude
----------------

Strokelitude extracts angle and position variables of a tethered winged insect.
The reported variables are wing leading and trailing edges, head and abdomen
angles & radii, and the pixel intensity of an extra elliptical region of the image
(intended to capture leg motion, etc). 

The software runs under ROS, the Robot Operating System, and can use any camera
or other source that provides an image stream, e.g. /camera/image_raw.


Installation:
---------------------------
You need ROS, a camera to supply a ROS image stream, Strokelitude, and the Phidgets API.
There might be more stuff, but that's the basics.

sudo-apt-get install ros-hydro-desktop-full
git clone https://github.com/ssafarik/StrokelitudeROS.git
rosmake StrokelitudeROS

Then go to the Phidgets website and get both "libphidget..." and "PhidgetsPython"



Analog Output & LED Panels
---------------------------
There are additional components to output voltages using a PhidgetsAnalog device,
and also to directly control the MReiser LED Panels (see bitbucket.org/mreiser,
and github.com/ssafarik/ledpanels).


Main Window
---------------------------
The main window provides an interface to most, but not all, of the functionality.
The buttons and checkboxes on the toolbar, and the handles on the image, function
as follows:
  <Exit>        Terminate the program.
  <SaveBG>      Save the instant camera image to disk as ~/strokelitude.png
  []Head        Turn on/off head tracking.
  []Abdomen     Turn on/off abdomen tracking.
  []Wings       Turn on/off left & right wing tracking.
  []Extra       Turn on/off the 'extra' ellipse intensity calculation.
  []SubtractBG  Turn on/off background subtraction on wings & extra.
  []Symmetric   When moving handles, keep them symmetric about the body axis.
  []Windows     Turn on/off helpful windows showing various internal images.

  
Frame Rate
---------------------------
The frame rate is dependent upon virtually every setting.  Turn off tracking of
unneeded bodyparts, use the smallest usable regions of interest (i.e. handle positions),
and turn off unneeded windows to speed the frame rate.

  
  
Parameters, YAML file.
---------------------------
All parameters are stored in the file ~/strokelitude.yaml, and default values
will be written upon the first successful run.  Please only edit the 
strokelitude.yaml file when Strokelitude is not running.  

Before the initial run of Strokelitude, you must create a blank ~/strokelitude.yaml
file.  Parameters used by Strokelitude are automatically written to the file,
hence any edits you make while Strokelitude is running will be overwritten.

Most parameters are set by manipulating the main window interface, but a few are 
not and are described here.  There are some global parameters, plus sections 
for each of abdomen/head/left/right.  

The parameters that are not specific to a bodypart, and not set by the UI are:
    filenameBackground:         Location to store the background image.  (~/strokelitude.png)
    image_topic:                ROS topic for the image stream. (/camera/image_raw)
    n_edges:                    Display 1 or 2 wing edges.
    parameterfile:              Location of the YAML file. (~/strokelitude.yaml)
    rc_background:              Time constant of the moving average background image. (1000.0)
    scale_image:                Scale all images by this amount.  Smaller values give better framerate. (1.0)
    threshold_intensity_flight: Wing intensity values greater than this count as flying. 
                                The range is on [0,1].  (0.1)
    use_gui:                    Turn off the graphical user interface to speed the framerate. (true)
  

The parameters that ARE specific to a bodypart, and not set by the UI are:
    autozero:                   Automatically (true) determine the zero angle based on center of motion,
                                or (false) use the first valid frame as the zero angle.
                             
Analog Output:
--------------
PhidgetsAnalog parameters determine how the four voltage output channels set their
voltages.  Each of the four channels is determined by a set of v#__ coefficients, 
where # is one of 0|1|2|3, for example, v0l1 is the leftangle1 component for voltage channel 0.

    v#enable:   Enable/disable each channel separately. (true|false)
    autorange:  Automatically set the four channels to L, R, L-R, L+R such that the voltages cover the
                range [-10,+10] based on the min/max witnessed angles.


Each voltage channel # calculates a voltage by a linear combination of terms of the form:
 v#out =  v#l1 * leftangle1
        + v#l2 * leftangle2
        + v#r1 * rightangle1
        + v#r2 * rightangle2
        + v#ha * headangle
        + v#hr * headradius
        + v#aa * abdomenangle
        + v#ar * abdomenradius
        + v#ei * extraintensity
       
Thus for example, a voltage output such as L-R can be generated by setting the l1 & r1 components 
to +1 & -1, respectively, for that channel.

    
        
        
