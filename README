Kinefly
----------------
Kinefly extracts kinematics variables from the camera image of a tethered winged insect.

The reported variables are wing major and minor edge angles, head and abdomen angles & radii, and the pixel intensity of an arbitrary elliptical region of the image (intended to capture leg motion, etc). 

The software runs on ROS, the Robot Operating System, and can use any camera or other source that provides a ROS image stream, e.g. /camera/image_raw.


Installation:
---------------------------
You need ROS, a camera to supply a ROS image stream, and Kinefly.  If you want to control voltages, then you'll need the PhidgetsAnalog hardware w/ Phidgets API.  If you want to control LED panels, then you'll need panels, see below.  There might be more stuff, but that's the basic setup.

Refer to the file 'install.txt' for detailed instructions.


Running:
---------------------------
To run Kinefly, you first need to ensure that roscore is running.  In a terminal window (note below that the $ is the command prompt, not typed by you):
$ roscore

Next, depending on if you have an ethernet or firewire or USB camera, edit the main.launch file as appropriate (found in Kinefly/launch).  The default is set up for a firewire (i.e. 1394) camera.  You may also need to edit the parameters .launch file for your camera to set exposure, framerate, etc.  

Then in another terminal window use the roslaunch command to launch Kinefly:
$ roslaunch Kinefly main.launch

There is an additional tool that is helpful for setting wing edge detection thresholds, etc, and this can be run via:
$ rosrun Kinefly plot_wingdata.py 


Main Window
---------------------------
The main window provides an interface to most, but not all, of the functionality. The buttons and checkboxes on the toolbar, and the handles on the image, function as follows:
  <Exit>        Terminate the program.  Use this instead of the 
                titlebar's [x].
  <SaveBG>      Save the instant camera image to disk as ~/kinefly.png
  []Head        Turn on/off head tracking.
  []Abdomen     Turn on/off abdomen tracking.
  []Wings       Turn on/off left & right wing tracking.
  []Aux         Turn on/off the 'aux' area intensity & wingbeat frequency
                calculations.
  []SubtractBG  Turn on/off background subtraction on wings & aux.
  []Stabilize   Turn on/off image stabilization for head & abdomen.  The  
                quality of stabilization is very dependent upon the region 
                selected with the handles. (default: false) 
  []Symmetric   When moving handles, keep them symmetric about the body axis.
  []Windows     Turn on/off helpful windows showing various internal images.

  
Handle Positioning:
---------------------------
Each of the head/abdomen/left/right body parts has a set of control points that determine what part of the image is tracked.  The handle positions determine the hinges, angles, and radii.

First, for best tracking, each of the head/abdomen/left/right body parts should have the 'hinge' handle placed at the center of rotation, which for example in the case of the abdomen is not the center of the abdomen, but rather is the point where the abdomen connects to the rest of the body, and rotates about.

For the head and abdomen, set the inner and outer radii to cover just a narrow strip that encloses unique features of the bodypart as the bodypart rotates, and set the angles to cover all of the bodypart motion.    

For the wings, the angles and radii should be positioned to indicate a region of interest such that legs and other non-wing moving things do not encroach into the region of interest.


Output Variables
---------------------------
The output is published on the ROS topic '/kinefly/flystate', and can be retrieved either by running the command 'rostopic echo kinefly/flystate' or by writing your own ROS node and subscribing to that topic.

There are two angles per wing, and angle1 is the 'stronger' edge in terms of intensity gradient, and is not necessarily the leading edge.  Angle2 is the edge with the next stronger gradient with the inverse sign.  In other words, the edges are found by looking at the intensity gradient across the wingstroke, and the strongest is labelled angle1.  Angle2 is the next strongest gradient with a sign opposite the gradient of angle1.  

An example of the flystate output is shown here:
---
header: 
  seq: 843
  stamp: 
    secs: 1393885539
    nsecs: 751821041
  frame_id: Fly
head: 
  radius: 56.592949767
  angle: -0.167498539458
  intensity: 0.376857756377
abdomen: 
  radius: 109.989494885
  angle: 0.0321847366966
  intensity: 0.638065271683
left: 
  angle1: 0.575350079497
  angle2: -0.629515897126
  intensity: 0.837157232885
right: 
  angle1: 1.0994397644
  angle2: 1.21830546613
  intensity: 0.626624052158
aux: 
  intensity: 0.592803359032
  freq: 198.85736183952
 

Units
---------------------------
Angle units are radians.  
Radius units are pixels.  
Intensity is on the range [0,1], where 0.0 equals all pixels black, and 1.0 equals all pixels white.  The main window shows intensity units in parentheses, ().

Each bodypart (head, abdomen, and wings) has its own angle origin, which in general terms is outward from the body center.  The zero angle for the head is directly opposite from the abdomen, and the zero of the abdomen angle is directly opposite from the head.  The zero for each wing is directly opposite from the other wing hinge.  In other words, imagine a line connecting the head and abdomen hinges, and a line connecting each wing hinge.  The zero angles are outward along those lines, and the range of each angle is on the range [-pi,+pi].


Frame Rate
---------------------------
The frame rate is dependent upon virtually every setting.  Turn off tracking of unneeded bodyparts, use the smallest usable regions of interest (i.e. handle positions), and turn off unneeded windows to speed the frame rate.  The largest improvement is likely to come from lowering the value of 'scale_image' in the .yaml file.

  
White On Black
---------------------------
Kinefly works best internally if the image is white-on-black.  The camera image may be either black-on-white or white-on-black, and whether to invert the color or not is decided automatically based on the pixel intensity of a region centered on the intersection of the lines head/abdomen hinges and left/right hinges.  If the mean pixel value of this region is darker than the mean pixel value of the overall image, then we invert the colors.


Background Subtraction
---------------------------
Background subtraction is performed only for the wings and aux region, not for the head and abdomen.  The background is initialized with the kinefly.png image on disk, and updates as a moving average with the time constant (in seconds) parameter rc_background. 


Wingbeat Frequency:
---------------------------
We make an attempt to measure the wingbeat frequency using the frequency spectrum of the aux intensity.  For this to work, several criteria must be met.  First, you must set the valid range of wingbeat frequencies in the kinefly.yaml file.  Upon the next launch, Kinefly will print out the compatible camera framerate needed (the lowest typically being slightly higher than twice the wingbeat passband width).  Next, set the camera to that framerate.  If the camera framerate can be maintained within the valid range, then Kinefly will compute the wingbeat frequency.  Since the framerate is typically much less than the Nyquist frequency needed to cover the wingbeat range, we use an undersampling technique and look at a baseband alias of the wingbeat frequencies.  Proper camera framerate is critical to the functioning of this feature, and the computer must be fast enough to process the frames in the allowed time, with no camera framerate variation outside of the allowed range.  Seriously consider using the parameter scale_image.      

  
Parameters, YAML file.
---------------------------
All parameters are stored in the file ~/kinefly.yaml, and default values will be written to the file upon the first successful run.  Please only edit the kinefly.yaml file when Kinefly is not running.  

Before the initial run of Kinefly, you must create a blank ~/kinefly.yaml file.  Parameters used by Kinefly are automatically written to the file, hence any edits you make while Kinefly is running will be overwritten.

Most parameters are set by manipulating the main window interface, but a few are not and are described here.  There are some global parameters, plus sections for each of head/abdomen/left/right.  

Parameters that apply to all bodyparts:
    filenameBackground:         Location to store the background image.  
                                (default: ~/kinefly.png)
    image_topic:                ROS topic for the image stream.  Running
                                the ROS node image_proc in addition to
                                Kinefly and setting this to image_mono
                                may help with some cameras that provide
                                bayer encoded images.
                                (default: /camera/image_raw)
    n_edges:                    Display 1 or 2 wing edges. (default: 1)
    parameterfile:              Location of the YAML file. 
                                (default: ~/kinefly.yaml)
    rc_background:              Time constant of the moving average background
                                image. (default: 1000.0)
    scale_image:                Scale all images by this amount.  Smaller 
                                values give better framerate. (default: 1.0)
    threshold_intensity_flight: Wing intensity values greater than this count
                                as flying. The range is on [0,1]. 
                                (default: 0.5)
    use_gui:                    Turn on/off the graphical user interface to
                                speed the framerate. (default: true)
  
Parameters that apply only to head & abdomen:
    autozero:                   Automatically (true) determine the zero 
                                angle based on center of motion, or (false)
                                use the first valid frame as the zero angle.
                                (default: true)

Parameters that apply only to wings:
    threshold:                  This is the threshold for the intensity
                                gradient to detect a wing edge.  Intensity 
                                gradients less than this value will result 
                                in the edge showing as pi radians.  You may
                                run the program in plot_wingdata.py for help 
                                setting these thresholds.

Parameters that apply only to aux:
    wingbeat_lo:                The lower frequency (hz) of wingbeats from 
                                your insect.
    wingbeat_hi:                The upper frequency (hz) of wingbeats from 
                                your insect.

                             
Voltage Output
---------------------------
Kinefly can output voltages using a PhidgetsAnalog device using the ROS node kinefly2phidgetsanalog.  The default values set the four voltage channels to (L, R, L-R, L+R), with the voltage value equal to the angle in radians.

PhidgetsAnalog parameters are located in the kinefly.yaml file under the phidgetsanalog key.  The parameters determine how the four voltage output channels set their voltages.  Each of the four channels is determined by a set of v#__ coefficients, where # is one of 0|1|2|3, for example, v0l1 is the leftangle1 component for voltage channel 0.

    v#enable:   Enable/disable each channel separately. (true|false)
    autorange:  Automatically set the four channels to L, R, L-R, L+R such
                that the voltages cover the range [-10,+10] based on the 
                min/max witnessed angles.


Each voltage channel # calculates a voltage by a linear combination of terms of the form:
 v#out =  v#l1 * leftangle1
        + v#l2 * leftangle2
        + v#r1 * rightangle1
        + v#r2 * rightangle2
        + v#ha * headangle
        + v#hr * headradius
        + v#aa * abdomenangle
        + v#ar * abdomenradius
        + v#xi * auxintensity
       
Thus for example, a voltage output such as L-R can be generated on v2 by setting the v2l1=+1 and v2r1=-1.




LED Panels Control
---------------------------
Kinefly can control the MReiser LED Panels (see bitbucket.org/mreiser/panels, and github.com/ssafarik/ledpanels) either directly over USB, or indirectly via the voltage signal generated by the voltage output above.

In either case the ROS node from github.com/ssafarik/ledpanels must be running in order to send serial commands to the panels.  If you want to control the panels via USB, then you'll also need to run the ROS node kinefly2ledpanels.
 
LEDPanels parameters are located in the kinefly.yaml file under the ledpanels key.  The parameters determine how the four voltage ADC input channels interpret the voltages into position and velocity commands. xpos, xvel, ypos, and yvel are determined by a set of adc# coefficients, where # is one of 0|1|2|3.

Each x or y channel calculates a position or velocity by a linear combination of terms of the form:
    Q = adc0*bnc0 
      + adc1*bnc1 
      + adc2*bnc2 
      + adc3*bnc3 
      + funcx*fx(t) 
      + funcy*fy(t),
where fx(t) and fy(t) are the internal panel controller functions that default to constant values of 10, unless otherwise changed.

The value Q then applies to either x or y as specified by the 'axis' parameter, and is interpreted as a position or velocity as specified by the 'mode' parameter.
 

