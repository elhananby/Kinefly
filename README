Strokelitude
----------------

Strokelitude extracts angle and position variables of a tethered winged insect.
The reported variables are wing major and minor edges, head and abdomen
angles & radii, and the pixel intensity of an elliptical region of the image
(intended to capture leg motion, etc). 

The software runs under ROS, the Robot Operating System, and can use any camera
or other source that provides a ROS image stream, e.g. /camera/image_raw.


Installation:
---------------------------
You need ROS, a camera to supply a ROS image stream, Strokelitude.  If you want
to control voltages, then you need the Phidgets API w/ PhidgetsAnalog hardware.  
If you want to control LED panels, then you'll need panels, see below.  There might 
be more stuff, but that's the basic setup.

sudo-apt-get install ros-hydro-desktop-full
git clone https://github.com/ssafarik/StrokelitudeROS.git
rosmake StrokelitudeROS

For Phidgets, go to the Phidgets website and get both "libphidget..." and "PhidgetsPython"



Main Window
---------------------------
The main window provides an interface to most, but not all, of the functionality.
The buttons and checkboxes on the toolbar, and the handles on the image, function
as follows:
  <Exit>        Terminate the program.
  <SaveBG>      Save the instant camera image to disk as ~/strokelitude.png
  []Head        Turn on/off head tracking.
  []Abdomen     Turn on/off abdomen tracking.
  []Wings       Turn on/off left & right wing tracking.
  []Extra       Turn on/off the 'extra' ellipse intensity calculation.
  []SubtractBG  Turn on/off background subtraction on wings & extra.
  []Symmetric   When moving handles, keep them symmetric about the body axis.
  []Windows     Turn on/off helpful windows showing various internal images.

  
Frame Rate
---------------------------
The frame rate is dependent upon virtually every setting.  Turn off tracking of
unneeded bodyparts, use the smallest usable regions of interest (i.e. handle positions),
and turn off unneeded windows to speed the frame rate.  The largest improvement
is likely to come from lowering the value of 'scale_image' in the .yaml file.

  
Handle Positioning:
---------------------------
Each of the head/abdomen/left/right body parts has a set of control points that determine
what part of the image is tracked.  The handle positions determine the hinge, angles, and radii.

First, for best tracking, each of the head/abdomen/left/right body parts should have the
'hinge' handle placed at the center of rotation, which in the case of the abdomen, for example,
is not the center of the abdomen, but rather is the point where the abdomen connects to the
rest of the body, and rotates about.

For the head and abdomen, set the inner and outer radii to cover just a narrow strip that 
encloses unique features of the bodypart as the bodypart rotates, and set the angles to 
cover all of the bodypart motion.    

For the wings, the angles and radii should be positioned to indicate a region of interest
such that legs and other non-wing moving things do not encroach into the region of interest.


Angles & Units
---------------------------
Each bodypart (head, abdomen, and wings) has its own angle origin.  The zero angle for the head
is directly opposite from the abdomen, and the zero of the abdomen angle is directly opposite 
from the head.  The zero for each wing is directly opposite from the other wing hinge.  In other
words, imagine a line connecting the head and abdomen, and a line connecting each wing hinge.
The zero angles are outward along those lines, and the range of each angle is on the 
range [-pi,+pi].

Angle units are radians.  
Radius units are pixels.  
Intensity is on the range [0,1], where 0.0 equals all pixels black, and 1.0 equals all pixels white.  


  
Parameters, YAML file.
---------------------------
All parameters are stored in the file ~/strokelitude.yaml, and default values
will be written to the file upon the first successful run.  Please only edit the 
strokelitude.yaml file when Strokelitude is not running.  

Before the initial run of Strokelitude, you must create a blank ~/strokelitude.yaml
file.  Parameters used by Strokelitude are automatically written to the file,
hence any edits you make while Strokelitude is running will be overwritten.

Most parameters are set by manipulating the main window interface, but a few are 
not and are described here.  There are some global parameters, plus sections 
for each of head/abdomen/left/right.  

The parameters that are not specific to a bodypart, and not set by the UI are:
    filenameBackground:         Location to store the background image.  (default: ~/strokelitude.png)
    image_topic:                ROS topic for the image stream. (default: /camera/image_raw)
    n_edges:                    Display 1 or 2 wing edges.
    parameterfile:              Location of the YAML file. (default: ~/strokelitude.yaml)
    rc_background:              Time constant of the moving average background image. (default: 1000.0)
    scale_image:                Scale all images by this amount.  Smaller values give better framerate. (default: 1.0)
    threshold_intensity_flight: Wing intensity values greater than this count as flying. 
                                The range is on [0,1].  (default: 0.1)
    use_gui:                    Turn on/off the graphical user interface to speed the framerate. (default: true)
  

The parameters that ARE specific to a bodypart, and not set by the UI are:
    autozero:                   Automatically (true) determine the zero angle based on center of motion,
                                or (false) use the first valid frame as the zero angle.

                             
Voltage Output
---------------------------
Strokelitude can output voltages using a PhidgetsAnalog device using the ROS node strokelitude2phidgetsanalog.

PhidgetsAnalog parameters are located in the strokelitude.yaml file under the phidgetsanalog key.  The parameters determine how the four voltage output channels set their voltages.  Each of the four channels is determined by a set of v#__ coefficients, where # is one of 0|1|2|3, for example, v0l1 is the leftangle1 component for voltage channel 0.

    v#enable:   Enable/disable each channel separately. (true|false)
    autorange:  Automatically set the four channels to L, R, L-R, L+R such that the voltages cover the
                range [-10,+10] based on the min/max witnessed angles.


Each voltage channel # calculates a voltage by a linear combination of terms of the form:
 v#out =  v#l1 * leftangle1
        + v#l2 * leftangle2
        + v#r1 * rightangle1
        + v#r2 * rightangle2
        + v#ha * headangle
        + v#hr * headradius
        + v#aa * abdomenangle
        + v#ar * abdomenradius
        + v#ei * extraintensity
       
Thus for example, a voltage output such as L-R can be generated on v2 by setting the v2l1=+1 and v2r1=-1.


LED Panels Control
---------------------------
Strokelitude can control the MReiser LED Panels (see bitbucket.org/mreiser/panels, and github.com/ssafarik/ledpanels) either directly over USB, or indirectly via the voltage signal generated by the voltage output above.

In either case the ROS node from github.com/ssafarik/ledpanels must be running in order to send serial commands to the panels.  If you want to control the panels via USB, then you'll also need to run the ROS node strokelitude2ledpanels.
 
LEDPanels parameters are located in the strokelitude.yaml file under the ledpanels key.  The parameters determine how the four voltage ADC input channels interpret the voltages into position and velocity commands. xpos, xvel, ypos, and yvel are determined by a set of adc# coefficients, where # is one of 0|1|2|3.

Each x or y channel calculates a position or velocity by a linear combination of terms of the form:
    Q = adc0*bnc0 + adc1*bnc1 + adc2*bnc2 + adc3*bnc3 + funcx*fx(t) + funcy*fy(t),
where fx(t) and fy(t) are the internal panel controller functions that default to constant values of 10, unless otherwise changed.

The value Q applies to either x or y as specified by the 'axis' parameter, and is interpreted as a position or velocity as specified by the 'mode' parameter.
 

The end.
